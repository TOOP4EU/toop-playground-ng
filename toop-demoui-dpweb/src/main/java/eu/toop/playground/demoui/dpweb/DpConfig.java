/**
 * This work is protected under copyrights held by the members of the
 * TOOP Project Consortium as indicated at
 * http://wiki.ds.unipi.gr/display/TOOP/Contributors
 * (c) 2018-2021. All rights reserved.
 *
 * This work is licensed under the EUPL 1.2.
 *
 *  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
 *
 * Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved
 * by the European Commission - subsequent versions of the EUPL
 * (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 *         https://joinup.ec.europa.eu/software/page/eupl
 */
// generated by tscfg 0.9.96 on Mon Jun 01 16:38:29 EEST 2020
// source: default.conf

package eu.toop.playground.demoui.dpweb;

public class DpConfig {
  public final DpConfig.Dp dp;
  public final DpConfig.Server server;
  public final DpConfig.Dp getDp() { return dp; }
  public final DpConfig.Server getServer() { return server; }
  public static class Dp {
    public final java.lang.String datasetDocument;
    public final java.lang.String datasetGBM;
    public final Dp.Direct direct;
    public final Dp.Kafka kafka;
    public final Dp.Toop toop;
    public final java.lang.String getDatasetDocument() { return datasetDocument; }
    public final java.lang.String getDatasetGBM() { return datasetGBM; }
    public final Dp.Direct getDirect() { return direct; }
    public final Dp.Kafka getKafka() { return kafka; }
    public final Dp.Toop getToop() { return toop; }
    public static class Direct {
      public final java.lang.String receive;
      public final java.lang.String submit;
      public final java.lang.String getReceive() { return receive; }
      public final java.lang.String getSubmit() { return submit; }
      
      public Direct(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.receive = c.hasPathOrNull("receive") ? c.getString("receive") : "/from-dc-direct";
        this.submit = c.hasPathOrNull("submit") ? c.getString("submit") : "http://localhost:8080/from-dp-direct";
      }
    }
    
    public static class Kafka {
      public final boolean enabled;
      public final java.lang.String topic;
      public final java.lang.String url;
      public final boolean getEnabled() { return enabled; }
      public final java.lang.String getTopic() { return topic; }
      public final java.lang.String getUrl() { return url; }
      
      public Kafka(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.enabled = c.hasPathOrNull("enabled") && c.getBoolean("enabled");
        this.topic = c.hasPathOrNull("topic") ? c.getString("topic") : "toop-dp-dev";
        this.url = c.hasPathOrNull("url") ? c.getString("url") : "tracker.acc.exchange.toop.eu:7073";
      }
    }
    
    public static class Toop {
      public final java.lang.String receive;
      public final java.lang.String submit;
      public final java.lang.String getReceive() { return receive; }
      public final java.lang.String getSubmit() { return submit; }
      
      public Toop(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.receive = c.hasPathOrNull("receive") ? c.getString("receive") : "/to-dp";
        this.submit = c.hasPathOrNull("submit") ? c.getString("submit") : "http://localhost:8080/api/user/submit/response";
      }
    }
    
    public Dp(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this.datasetDocument = c.hasPathOrNull("datasetDocument") ? c.getString("datasetDocument") : "datasets/document";
      this.datasetGBM = c.hasPathOrNull("datasetGBM") ? c.getString("datasetGBM") : "datasets/gbm";
      this.direct = c.hasPathOrNull("direct") ? new Dp.Direct(c.getConfig("direct"), parentPath + "direct.", $tsCfgValidator) : new Dp.Direct(com.typesafe.config.ConfigFactory.parseString("direct{}"), parentPath + "direct.", $tsCfgValidator);
      this.kafka = c.hasPathOrNull("kafka") ? new Dp.Kafka(c.getConfig("kafka"), parentPath + "kafka.", $tsCfgValidator) : new Dp.Kafka(com.typesafe.config.ConfigFactory.parseString("kafka{}"), parentPath + "kafka.", $tsCfgValidator);
      this.toop = c.hasPathOrNull("toop") ? new Dp.Toop(c.getConfig("toop"), parentPath + "toop.", $tsCfgValidator) : new Dp.Toop(com.typesafe.config.ConfigFactory.parseString("toop{}"), parentPath + "toop.", $tsCfgValidator);
    }
  }
  
  public static class Server {
    public final boolean cors;
    public final int port;
    public final boolean getCors() { return cors; }
    public final int getPort() { return port; }
    
    public Server(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this.cors = c.hasPathOrNull("cors") && c.getBoolean("cors");
      this.port = c.hasPathOrNull("port") ? c.getInt("port") : 9090;
    }
  }
  
  public DpConfig(com.typesafe.config.Config c) {
    final $TsCfgValidator $tsCfgValidator = new $TsCfgValidator();
    final java.lang.String parentPath = "";
    this.dp = c.hasPathOrNull("dp") ? new DpConfig.Dp(c.getConfig("dp"), parentPath + "dp.", $tsCfgValidator) : new DpConfig.Dp(com.typesafe.config.ConfigFactory.parseString("dp{}"), parentPath + "dp.", $tsCfgValidator);
    this.server = c.hasPathOrNull("server") ? new DpConfig.Server(c.getConfig("server"), parentPath + "server.", $tsCfgValidator) : new DpConfig.Server(com.typesafe.config.ConfigFactory.parseString("server{}"), parentPath + "server.", $tsCfgValidator);
    $tsCfgValidator.validate();
  }
  private static final class $TsCfgValidator  {
    private final java.util.List<java.lang.String> badPaths = new java.util.ArrayList<>();
    
    void addBadPath(java.lang.String path, com.typesafe.config.ConfigException e) {
      badPaths.add("'" + path + "': " + e.getClass().getName() + "(" + e.getMessage() + ")");
    }
    
    void validate() {
      if (!badPaths.isEmpty()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Invalid configuration:");
        for (java.lang.String path : badPaths) {
          sb.append("\n    ").append(path);
        }
        throw new com.typesafe.config.ConfigException(sb.toString()) {};
      }
    }
  }
}
      
